OverviewPackageClassUseTreeDeprecatedIndexHelpJava™ Platform
Standard Ed. 7Prev ClassNext ClassFramesNo FramesAll ClassesSummary: Nested | Field | Constr | MethodDetail: Field | Constr | Method
java.io
Class FileOutputStream
java.lang.Object
java.io.OutputStream
java.io.FileOutputStream
All Implemented Interfaces:
Closeable, Flushable, AutoCloseable

public class FileOutputStream
extends OutputStream
A file output stream is an output stream for writing data to a File or to a FileDescriptor. Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one FileOutputStream (or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open.
FileOutputStream is meant for writing streams of raw bytes such as image data. For writing streams of characters, consider using FileWriter.

Since:
JDK1.0
See Also:
File, FileDescriptor, FileInputStream, Files.newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)
Constructor Summary
Constructors 
Constructor and Description
FileOutputStream(File file)
Creates a file output stream to write to the file represented by the specified File object.
FileOutputStream(File file, boolean append)
Creates a file output stream to write to the file represented by the specified File object.
FileOutputStream(FileDescriptor fdObj)
Creates a file output stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system.
FileOutputStream(String name)
Creates a file output stream to write to the file with the specified name.
FileOutputStream(String name, boolean append)
Creates a file output stream to write to the file with the specified name.
Method Summary
Methods 
Modifier and Type	Method and Description
void	close()
Closes this file output stream and releases any system resources associated with this stream.
protected void	finalize()
Cleans up the connection to the file, and ensures that the close method of this file output stream is called when there are no more references to this stream.
FileChannel	getChannel()
Returns the unique FileChannel object associated with this file output stream.
FileDescriptor	getFD()
Returns the file descriptor associated with this stream.
void	write(byte[] b)
Writes b.length bytes from the specified byte array to this file output stream.
void	write(byte[] b, int off, int len)
Writes len bytes from the specified byte array starting at offset off to this file output stream.
void	write(int b)
Writes the specified byte to this file output stream.
Methods inherited from class java.io.OutputStream
flush
Methods inherited from class java.lang.Object
clone, equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait
Constructor Detail
FileOutputStream
public FileOutputStream(String name)
                 throws FileNotFoundException
Creates a file output stream to write to the file with the specified name. A new FileDescriptor object is created to represent this file connection.
First, if there is a security manager, its checkWrite method is called with name as its argument.

If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.

Parameters:
name - the system-dependent filename
Throws:
FileNotFoundException - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
SecurityException - if a security manager exists and its checkWrite method denies write access to the file.
See Also:
SecurityManager.checkWrite(java.lang.String)
FileOutputStream
public FileOutputStream(String name,
                boolean append)
                 throws FileNotFoundException
Creates a file output stream to write to the file with the specified name. If the second argument is true, then bytes will be written to the end of the file rather than the beginning. A new FileDescriptor object is created to represent this file connection.
First, if there is a security manager, its checkWrite method is called with name as its argument.

If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.

Parameters:
name - the system-dependent file name
append - if true, then bytes will be written to the end of the file rather than the beginning
Throws:
FileNotFoundException - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason.
SecurityException - if a security manager exists and its checkWrite method denies write access to the file.
Since:
JDK1.1
See Also:
SecurityManager.checkWrite(java.lang.String)
FileOutputStream
public FileOutputStream(File file)
                 throws FileNotFoundException
Creates a file output stream to write to the file represented by the specified File object. A new FileDescriptor object is created to represent this file connection.
First, if there is a security manager, its checkWrite method is called with the path represented by the file argument as its argument.

If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.

Parameters:
file - the file to be opened for writing.
Throws:
FileNotFoundException - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
SecurityException - if a security manager exists and its checkWrite method denies write access to the file.
See Also:
File.getPath(), SecurityException, SecurityManager.checkWrite(java.lang.String)
FileOutputStream
public FileOutputStream(File file,
                boolean append)
                 throws FileNotFoundException
Creates a file output stream to write to the file represented by the specified File object. If the second argument is true, then bytes will be written to the end of the file rather than the beginning. A new FileDescriptor object is created to represent this file connection.
First, if there is a security manager, its checkWrite method is called with the path represented by the file argument as its argument.

If the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason then a FileNotFoundException is thrown.

Parameters:
file - the file to be opened for writing.
append - if true, then bytes will be written to the end of the file rather than the beginning
Throws:
FileNotFoundException - if the file exists but is a directory rather than a regular file, does not exist but cannot be created, or cannot be opened for any other reason
SecurityException - if a security manager exists and its checkWrite method denies write access to the file.
Since:
1.4
See Also:
File.getPath(), SecurityException, SecurityManager.checkWrite(java.lang.String)
FileOutputStream
public FileOutputStream(FileDescriptor fdObj)
Creates a file output stream to write to the specified file descriptor, which represents an existing connection to an actual file in the file system.
First, if there is a security manager, its checkWrite method is called with the file descriptor fdObj argument as its argument.

If fdObj is null then a NullPointerException is thrown.

This constructor does not throw an exception if fdObj is invalid. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an IOException is thrown.

Parameters:
fdObj - the file descriptor to be opened for writing
Throws:
SecurityException - if a security manager exists and its checkWrite method denies write access to the file descriptor
See Also:
SecurityManager.checkWrite(java.io.FileDescriptor)
Method Detail
write
public void write(int b)
           throws IOException
Writes the specified byte to this file output stream. Implements the write method of OutputStream.
Specified by:
write in class OutputStream
Parameters:
b - the byte to be written.
Throws:
IOException - if an I/O error occurs.
write
public void write(byte[] b)
           throws IOException
Writes b.length bytes from the specified byte array to this file output stream.
Overrides:
write in class OutputStream
Parameters:
b - the data.
Throws:
IOException - if an I/O error occurs.
See Also:
OutputStream.write(byte[], int, int)
write
public void write(byte[] b,
         int off,
         int len)
           throws IOException
Writes len bytes from the specified byte array starting at offset off to this file output stream.
Overrides:
write in class OutputStream
Parameters:
b - the data.
off - the start offset in the data.
len - the number of bytes to write.
Throws:
IOException - if an I/O error occurs.
close
public void close()
           throws IOException
Closes this file output stream and releases any system resources associated with this stream. This file output stream may no longer be used for writing bytes.
If this stream has an associated channel then the channel is closed as well.

Specified by:
close in interface Closeable
Specified by:
close in interface AutoCloseable
Overrides:
close in class OutputStream
Throws:
IOException - if an I/O error occurs.
getFD
public final FileDescriptor getFD()
                           throws IOException
Returns the file descriptor associated with this stream.
Returns:
the FileDescriptor object that represents the connection to the file in the file system being used by this FileOutputStream object.
Throws:
IOException - if an I/O error occurs.
See Also:
FileDescriptor
getChannel
public FileChannel getChannel()
Returns the unique FileChannel object associated with this file output stream.
The initial position of the returned channel will be equal to the number of bytes written to the file so far unless this stream is in append mode, in which case it will be equal to the size of the file. Writing bytes to this stream will increment the channel's position accordingly. Changing the channel's position, either explicitly or by writing, will change this stream's file position.

Returns:
the file channel associated with this file output stream
Since:
1.4
finalize
protected void finalize()
                 throws IOException
Cleans up the connection to the file, and ensures that the close method of this file output stream is called when there are no more references to this stream.
Overrides:
finalize in class Object
Throws:
IOException - if an I/O error occurs.
See Also:
FileInputStream.close()
OverviewPackageClassUseTreeDeprecatedIndexHelpJava™ Platform
Standard Ed. 7Prev ClassNext ClassFramesNo FramesAll ClassesSummary: Nested | Field | Constr | MethodDetail: Field | Constr | Method
Submit a bug or feature 
For further API reference and developer documentation, see Java SE Documentation. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples.
Copyright © 1993, 2017, Oracle and/or its affiliates. All rights reserved. Use is subject to license terms. Also see the documentation redistribution policy.